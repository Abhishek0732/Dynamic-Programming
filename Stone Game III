class Solution {
    public static int f(int[] stone, int ind,int[] dp){
        int n = stone.length;
        if(ind>=n) return 0;
        if(dp[ind]!=-1) return dp[ind];
        int take1 = stone[ind]-f(stone,ind+1,dp);
        int take2 = Integer.MIN_VALUE;
        if(ind+1<n) take2 = stone[ind]+stone[ind+1]-f(stone,ind+2,dp);
        int take3 = Integer.MIN_VALUE;
        if(ind+2<n) take3 = stone[ind]+stone[ind+1]+stone[ind+2]-f(stone,ind+3,dp);
        return dp[ind] = Math.max(take1,Math.max(take2,take3));
    }
    public String stoneGameIII(int[] stoneValue) {
        int[] dp = new int[stoneValue.length+1];
        int n = stoneValue.length;
        for(int i=n-1;i>=0;i--){
            int take1 = stoneValue[i]-dp[i+1];
            int take2 = Integer.MIN_VALUE;
            if(i+1<n) take2 = stoneValue[i]+stoneValue[i+1]-dp[i+2];
            int take3 = Integer.MIN_VALUE;
            if(i+2<n) take3 = stoneValue[i]+stoneValue[i+1]+stoneValue[i+2]-dp[i+3];
            dp[i] = Math.max(take1,Math.max(take2,take3));
            }
        if(dp[0]>0) return "Alice";
        if(dp[0]<0) return "Bob";
        return "Tie";
    }
}
