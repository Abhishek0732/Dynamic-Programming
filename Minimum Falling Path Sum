class Solution {
    public static int f(int i, int j, int[][] matrix,int[][] dp){
        int m = matrix[0].length;
        if(j<0 || j>= m) return 1000000;
        if(i==0) return matrix[i][j];
        if(dp[i][j]!=-1) return dp[i][j];
        int u = matrix[i][j] + f(i-1,j,matrix,dp);
        int ld = matrix[i][j] + f(i-1,j-1,matrix,dp);
        int rd = matrix[i][j] + f(i-1,j+1,matrix,dp);
        return dp[i][j] = Math.min(u,Math.min(ld,rd));
    }
    public int minFallingPathSum(int[][] matrix) {
        int n = matrix.length;
        int m = matrix[0].length;
        int dp[][] = new int[n][m];
        for(int [] row: dp) Arrays.fill(row,-1);
        int mini = 1000000;
        for(int j=0;j<m;j++) mini = Math.min(mini,f(n-1,j,matrix,dp));
        return mini;
    }
}
