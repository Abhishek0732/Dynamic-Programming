class Solution {
    public static int f(int i, int j1, int j2, int[][] grid, int[][][] dp){
        int n = grid.length;
        int m = grid[0].length;
        if(j1<0 || j2<0 || j1>=m || j2>=m) return -1000000;
        if(i == n-1){
            if(j1==j2) return grid[i][j1];
            else return grid[i][j1] + grid[i][j2];
        }
        if(dp[i][j1][j2]!=-1) return dp[i][j1][j2];
        int maxi = 0;
        for(int dj1 = -1; dj1<=+1; dj1++){
            for(int dj2 = -1; dj2<=+1; dj2++){
                int value = 0;
                if(j1 == j2) value = grid[i][j1];
                else value = grid[i][j1] + grid[i][j2];
                value += f(i+1,j1+dj1,j2+dj2, grid,dp);
                maxi = Math.max(maxi,value);
            }
        }
        return dp[i][j1][j2] = maxi;
    }
    public int cherryPickup(int[][] grid) {
        int dp[][][] = new int[grid.length][grid[0].length][grid[0].length];
        for(int[][] row : dp){
            for(int [] rowcol: row) Arrays.fill(rowcol,-1);
        }
        return f(0,0,grid[0].length-1,grid,dp);
    }
}
