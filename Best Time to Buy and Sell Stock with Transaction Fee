class Solution {
    public static int f(int ind, int buy, int[] prices, int fee,int[][] dp){
        if(ind == prices.length) return 0;
        if(dp[ind][buy]!=-1) return dp[ind][buy];
        if(buy == 1) dp[ind][buy] = Math.max(-prices[ind]+f(ind+1,0,prices,fee,dp),0+f(ind+1,1,prices,fee,dp));
        else dp[ind][buy] = Math.max(prices[ind]-fee+f(ind+1,1,prices,fee,dp),0+f(ind+1,0,prices,fee,dp));
        return dp[ind][buy];
    }
    public int maxProfit(int[] prices, int fee) {
        int n = prices.length;
        int[][] dp = new int[n][2];
        for(int[] row:dp) Arrays.fill(row,-1);
        return f(0,1,prices,fee,dp);
    }
}

class Solution {
    public static int f(int ind, int buy, int[] prices, int fee,int[][] dp){
        if(ind == prices.length) return 0;
        if(dp[ind][buy]!=-1) return dp[ind][buy];
        if(buy == 1) dp[ind][buy] = Math.max(-prices[ind]+f(ind+1,0,prices,fee,dp),0+f(ind+1,1,prices,fee,dp));
        else dp[ind][buy] = Math.max(prices[ind]-fee+f(ind+1,1,prices,fee,dp),0+f(ind+1,0,prices,fee,dp));
        return dp[ind][buy];
    }
    public int maxProfit(int[] prices, int fee) {
        int n = prices.length;
        int[][] dp = new int[n+1][2];
        //for(int[] row:dp) Arrays.fill(row,-1);
        //return f(0,1,prices,fee,dp);

        dp[n][0] = 0;
        dp[n][1] = 0;
        for(int ind = n-1;ind>=0;ind--){
            for(int buy = 0;buy<=1;buy++){
                if(buy == 1) dp[ind][buy] = Math.max(-prices[ind]+dp[ind+1][0],0+dp[ind+1][1]);
                else dp[ind][buy] = Math.max(prices[ind]-fee+dp[ind+1][1],0+dp[ind+1][0]);
            }
        }
        return dp[0][1];
    }
}
