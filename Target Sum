class Solution {
    public static int f(int ind, int sum, int[] num,int dp[][]){
        
        if(ind == 0){
			if(sum==0 && num[0]==0) return 2;
			if(sum==0 || num[0]==sum) return 1;
			return 0;
		}
        if(dp[ind][sum]!=-1) return dp[ind][sum];
        int notpick = f(ind-1 , sum, num,dp);
        int pick = 0;
        if(num[ind]<=sum) pick = f(ind-1,sum-num[ind], num,dp);
        return dp[ind][sum] = (notpick + pick);
    }
    public static int findWays(int num[], int tar) {
        // Write your code here..
        int n = num.length;
        int dp[][] = new int[n][tar+1];
		for(int[] row:dp) Arrays.fill(row,-1);
		return f(n-1,tar,num,dp);
	}
	public static int countPartitions(int n, int d, int[] arr) {
		// Write your code here.
		int totalsum = 0;
		for(int a:arr) totalsum+=a;
		if( totalsum-d<0 || (totalsum-d)%2==1) return 0;
		return findWays(arr,(totalsum-d)/2);
	}
    public int findTargetSumWays(int[] nums, int target) {
        return countPartitions(nums.length, target,nums);
    }
}
